import React, { useState, useRef, useEffect } from 'react';
import { Loader, Send, Image as ImageIcon, Plus, AlertCircle, Download, X, MoreVertical, WandSparkles, Palette } from 'lucide-react';

// --- Style Configuration ---
const STYLES = [
    { name: 'Cinematic', keywords: 'cinematic film still, ultra-detailed, professional color grading, photorealistic, dramatic lighting, 8k' },
    { name: 'Hyper Realistic', keywords: 'hyperrealistic, ultra detailed face, sharp focus, studio lighting, detailed skin texture, 85mm lens, masterpiece' },
    { name: 'Ghibli', keywords: 'ghibli studio anime style, hand-drawn, heartwarming, soft watercolor palette, detailed background art' },
    { name: 'Cyberpunk', keywords: 'cyberpunk city, neon lights, futuristic, dystopian, blade runner style, vibrant reflections, intricate details' },
    { name: 'Fantasy', keywords: 'epic fantasy digital art, detailed, concept art, trending on artstation, matte painting, breathtaking' },
    { name: 'Horror', keywords: 'horror movie scene, dark, eerie, unsettling, high contrast, grainy texture, suspenseful, frightening' },
    { name: 'Vintage', keywords: 'vintage photograph, 1950s style, sepia tones, film grain, retro aesthetic, classic car, nostalgic' },
    { name: 'Pixar', keywords: 'pixar animation style, 3d render, cute and adorable characters, vibrant and colorful, smooth textures' },
];

// --- Helper: Local "Magic Prompt" feature ---
// FIX: Removed all Google Gemini API references. This now runs locally.
const getMagicPrompt = async (prompt, selectedStyle) => {
    // This function now enhances the prompt locally without any external API calls.
    const styleInfo = STYLES.find(s => s.name === selectedStyle);
    const styleKeywords = styleInfo ? styleInfo.keywords : 'highly detailed';
    
    // Create a new, enhanced prompt.
    const enhancedPrompt = `A breathtaking, professional, and visually rich image of: ${prompt}. Emphasize the style of ${styleKeywords}. Describe a complete scene with details on lighting, textures, camera angles, background, mood, and color tones.`;
    
    // Return it as a resolved promise to maintain the async function signature.
    return Promise.resolve(enhancedPrompt);
};

// --- UI Components (No layout changes) ---
const Header = ({ onMenuClick }) => (
    <header className="absolute top-0 left-0 right-0 p-4 flex justify-between items-center z-20">
        <h1 className="text-xl md:text-2xl font-bold text-white tracking-wider">V3 CLASHER</h1>
        <button onClick={onMenuClick} className="p-2 rounded-full hover:bg-gray-800 transition-colors" title="History">
            <MoreVertical className="w-6 h-6 text-white" />
        </button>
    </header>
);

const ImageDisplay = ({ generatedImage, isLoading, error }) => (
    <div className="w-full h-full bg-black rounded-3xl flex items-center justify-center p-2 transition-all duration-500 shadow-[0_0_30px_5px_rgba(0,0,0,0.3)] relative">
        <div className="w-full h-full border border-gray-800 rounded-2xl flex items-center justify-center overflow-hidden">
            {isLoading && (
                <div className="flex flex-col items-center gap-4 text-gray-400 animate-fade-in">
                    <Loader className="w-12 h-12 text-white animate-spin" />
                    <p className="font-medium tracking-widest animate-pulse">GENERATING...</p>
                </div>
            )}
            {!isLoading && error && (
                <div className="flex flex-col items-center gap-4 text-center text-red-500 p-6 animate-fade-in">
                    <AlertCircle className="w-12 h-12" />
                    <p className="font-bold">Ek Samasya Aa Gayi</p>
                    <p className="text-gray-400 text-sm">{error}</p>
                </div>
            )}
            {!isLoading && !error && generatedImage && (
                <img src={generatedImage} alt="Generated masterpiece" className="w-full h-full object-contain rounded-xl animate-fade-in-slow" />
            )}
            {!isLoading && !error && !generatedImage && (
                <div className="flex flex-col items-center gap-4 text-gray-600 animate-fade-in">
                    <ImageIcon className="w-20 h-20" />
                    <p className="font-medium">Aapki AI image yahaan dikhegi</p>
                </div>
            )}
        </div>
    </div>
);

const StyleMenu = ({ isOpen, onClose, selectedStyle, onSelect }) => {
    if (!isOpen) return null;
    return (
        <div className="fixed inset-0 bg-black/60 z-30 flex items-center justify-center" onClick={onClose}>
            <div className="bg-gray-900 border border-gray-700 rounded-lg shadow-2xl w-full max-w-sm p-4 animate-fade-in" onClick={e => e.stopPropagation()}>
                <h3 className="text-lg font-bold text-white mb-4 text-center">Select a Style</h3>
                <div className="grid grid-cols-2 gap-3">
                    {STYLES.map(style => (
                        <button 
                            key={style.name}
                            onClick={() => { onSelect(style.name); onClose(); }}
                            className={`p-3 rounded-md text-sm font-semibold transition-colors ${selectedStyle === style.name ? 'bg-white text-black' : 'bg-gray-800 text-white hover:bg-gray-700'}`}
                        >
                            {style.name}
                        </button>
                    ))}
                </div>
            </div>
        </div>
    );
};

const HistoryDrawer = ({ history, isOpen, onClose, onView, onSave, onDelete }) => (
    <>
        <div className={`fixed inset-0 bg-black/60 z-30 transition-opacity duration-300 ${isOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'}`} onClick={onClose} />
        <div className={`fixed top-0 right-0 h-full w-full max-w-sm bg-gray-900 shadow-2xl z-40 transform transition-transform duration-300 ease-in-out ${isOpen ? 'translate-x-0' : 'translate-x-full'}`}>
            <div className="flex justify-between items-center p-4 border-b border-gray-700">
                <h2 className="text-lg font-bold text-white">History</h2>
                <button onClick={onClose} className="p-2 rounded-full hover:bg-gray-800"><X className="w-6 h-6 text-white" /></button>
            </div>
            {history.length === 0 ? (
                <p className="text-gray-500 text-center p-8">Aapki history yahan dikhegi.</p>
            ) : (
                <div className="p-4 grid grid-cols-2 gap-4 overflow-y-auto h-[calc(100vh-65px)]">
                    {history.map((item) => (
                        <div key={item.id} className="group relative rounded-lg overflow-hidden shadow-lg border border-gray-700">
                            <img src={item.url} alt="Generated" className="w-full h-full object-cover" />
                            <div className="absolute inset-0 bg-black/70 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex flex-col justify-end p-2 gap-2">
                                <p className="text-white text-xs truncate mb-auto">{item.prompt}</p>
                                <button onClick={() => onView(item)} className="text-xs bg-gray-200 text-black px-2 py-1 rounded-md font-semibold hover:bg-white">View</button>
                                <div className="flex gap-2">
                                    <button onClick={() => onSave(item.url)} className="flex-1 text-xs bg-blue-600 text-white px-2 py-1 rounded-md font-semibold hover:bg-blue-500">Save Image</button>
                                    <button onClick={() => onDelete(item.id)} className="flex-1 text-xs bg-red-600 text-white px-2 py-1 rounded-md font-semibold hover:bg-red-500">Delete</button>
                                </div>
                            </div>
                        </div>
                    ))}
                </div>
            )}
        </div>
    </>
);


// --- Main App Component ---
export default function App() {
    const [prompt, setPrompt] = useState('');
    const [referenceImages, setReferenceImages] = useState([]);
    const [generatedImage, setGeneratedImage] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [isMagicking, setIsMagicking] = useState(false);
    const [error, setError] = useState(null);
    const [history, setHistory] = useState([]);
    const [isHistoryOpen, setIsHistoryOpen] = useState(false);
    const [aspectRatio, setAspectRatio] = useState('1:1');
    const [selectedStyle, setSelectedStyle] = useState(STYLES[0].name);
    const [isStyleMenuOpen, setIsStyleMenuOpen] = useState(false);
    const fileInputRef = useRef(null);

    const handleImageUpload = (e) => {
        if (referenceImages.length >= 3) return;
        const file = e.target.files[0];
        if (file) setReferenceImages(prev => [...prev, { id: Date.now(), url: URL.createObjectURL(file) }]);
    };

    const removeReferenceImage = (id) => {
        const imageToRemove = referenceImages.find(img => img.id === id);
        if (imageToRemove) URL.revokeObjectURL(imageToRemove.url);
        setReferenceImages(prev => prev.filter(img => img.id !== id));
    };

    const handleGenerateImage = async () => {
        if (!prompt.trim() || isLoading) return;
        setIsLoading(true);
        setError(null);
        setGeneratedImage(null);

        // FIX: Securely load the Hugging Face API token from environment variables
        const HF_TOKEN = process.env.REACT_APP_HUGGING_FACE_TOKEN;

        try {
            // FIX: Check for the existence of the API token
            if (!HF_TOKEN) {
                throw new Error("Hugging Face API token is not configured. Please set REACT_APP_HUGGING_FACE_TOKEN in your environment.");
            }

            // FIX: Style keywords are correctly combined with the prompt for accurate styling
            const styleKeywords = STYLES.find(s => s.name === selectedStyle)?.keywords || '';
            const qualityKeywords = "4K, Ultra HD, sharp, professional, masterpiece, high quality, sharp focus";
            const finalPrompt = `${prompt}, ${styleKeywords}, ${qualityKeywords}`;
            
            // FIX: Aspect ratio buttons now correctly control image resolution
            let width = 1024;
            let height = 1024;
            if (aspectRatio === '16:9') {
                width = 1344;
                height = 768;
            } else if (aspectRatio === '9:16') {
                width = 768;
                height = 1344;
            }

            const API_URL = "https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-xl-base-1.0";
            
            const response = await fetch(API_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${HF_TOKEN}`
                },
                body: JSON.stringify({ 
                    inputs: finalPrompt,
                    parameters: { 
                        width, 
                        height,
                        // FIX: Added negative prompt to improve image quality and prevent bad text/artifacts
                        negative_prompt: "blurry, low quality, worst quality, deformed, ugly, watermark, signature, garbled text, illegible text, bad anatomy, disfigured"
                    }
                }),
            });

            if (!response.ok) {
                if(response.status === 503) {
                    throw new Error("Model is currently loading on the server. Please wait a moment and try again.");
                }
                const errorText = await response.text();
                throw new Error(`API Error (${response.status}): ${errorText}`);
            }
            
            const imageBlob = await response.blob();
            const imageUrl = URL.createObjectURL(imageBlob);
            
            setGeneratedImage(imageUrl);
            setHistory(prev => [{ id: Date.now(), url: imageUrl, prompt: prompt, style: selectedStyle, ratio: aspectRatio }, ...prev]);

        } catch (err) {
            console.error(err); // Log full error for debugging
            setError(err.message);
        } finally {
            setIsLoading(false);
        }
    };

    // FIX: "Magic Prompt" feature is now functional
    const handleMagicPrompt = async () => {
        if (!prompt.trim() || isMagicking) return;
        setIsMagicking(true);
        setError(null);
        try {
            const magicPrompt = await getMagicPrompt(prompt, selectedStyle);
            setPrompt(magicPrompt.trim());
        } catch (err) {
            setError(err.message);
        } finally {
            setIsMagicking(false);
        }
    };
    
    const handleSaveImage = (url) => {
        if (!url) return;
        const link = document.createElement('a');
        link.href = url;
        link.download = `v3-clasher-image-${Date.now()}.png`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
    
    const deleteFromHistory = (id) => {
        const imageToRemove = history.find(item => item.id === id);
        if (imageToRemove) URL.revokeObjectURL(imageToRemove.url);
        setHistory(prev => prev.filter(item => item.id !== id));
    };

    const viewFromHistory = (item) => {
        setGeneratedImage(item.url);
        setPrompt(item.prompt);
        setSelectedStyle(item.style);
        setAspectRatio(item.ratio);
        setIsHistoryOpen(false);
    };

    useEffect(() => {
        const styleSheet = document.createElement("style");
        styleSheet.innerText = `@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap'); body, .font-sans { font-family: 'Inter', sans-serif; } @keyframes fade-in { from { opacity: 0; } to { opacity: 1; } } @keyframes fade-in-slow { from { opacity: 0; transform: scale(0.95); } to { opacity: 1; transform: scale(1); } } .animate-fade-in { animation: fade-in 0.5s ease-out forwards; } .animate-fade-in-slow { animation: fade-in-slow 0.6s ease-in-out forwards; }`;
        document.head.appendChild(styleSheet);
        return () => document.head.removeChild(styleSheet);
    }, []);
    
    // FIX: Improved cleanup logic for memory management
    useEffect(() => {
        return () => {
            history.forEach(item => URL.revokeObjectURL(item.url));
            referenceImages.forEach(img => URL.revokeObjectURL(img.url));
            if (generatedImage) URL.revokeObjectURL(generatedImage);
        };
    }, []); // Run only once on unmount to clean all accumulated URLs

    return (
        <div className="bg-black min-h-screen w-full flex flex-col items-center justify-between p-4 font-sans text-white overflow-hidden relative">
            <Header onMenuClick={() => setIsHistoryOpen(true)} />
            <HistoryDrawer history={history} isOpen={isHistoryOpen} onClose={() => setIsHistoryOpen(false)} onView={viewFromHistory} onSave={handleSaveImage} onDelete={deleteFromHistory} />
            <StyleMenu isOpen={isStyleMenuOpen} onClose={() => setIsStyleMenuOpen(false)} selectedStyle={selectedStyle} onSelect={setSelectedStyle} />
            
            <main className="flex-1 flex flex-col items-center justify-center w-full max-w-2xl mt-16 mb-4">
                <div className="w-full aspect-square">
                   <ImageDisplay generatedImage={generatedImage} isLoading={isLoading} error={error} />
                </div>
                 {generatedImage && !isLoading && !error && (
                    <div className="w-full mt-4 flex justify-center animate-fade-in">
                        <button onClick={() => handleSaveImage(generatedImage)} className="flex items-center gap-2 px-6 py-2 bg-gray-800 text-white font-semibold rounded-full border border-gray-700 hover:bg-white hover:text-black transition-colors">
                            <Download size={16} /> Save Image
                        </button>
                    </div>
                )}
            </main>

            <footer className="w-full max-w-2xl flex flex-col gap-3 z-10">
                 <div className="flex items-center justify-center gap-3">
                    <button onClick={handleMagicPrompt} disabled={isLoading || isMagicking || !prompt.trim()} className="flex items-center gap-2 px-4 py-2 bg-gray-800/80 text-white text-sm font-semibold rounded-full border border-gray-700 hover:bg-gray-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                        {isMagicking ? <Loader size={16} className="animate-spin"/> : <WandSparkles size={16} />} Magic Prompt
                    </button>
                     <button onClick={() => setIsStyleMenuOpen(true)} disabled={isLoading} className="flex items-center gap-2 px-4 py-2 bg-gray-800/80 text-white text-sm font-semibold rounded-full border border-gray-700 hover:bg-gray-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                        <Palette size={16} /> Style: {selectedStyle}
                    </button>
                    <div className="flex items-center gap-1 p-1 bg-gray-800/80 rounded-full border border-gray-700">
                        {['1:1', '16:9', '9:16'].map(r => (
                            <button key={r} onClick={() => !isLoading && setAspectRatio(r)} disabled={isLoading} className={`px-3 py-1 text-sm rounded-full transition-colors ${aspectRatio === r ? 'bg-white text-black' : 'text-white hover:bg-gray-700'} disabled:cursor-not-allowed`}>
                                {r}
                            </button>
                        ))}
                    </div>
                </div>

                <div className="flex items-center gap-2 w-full bg-gray-900/80 border border-gray-700 rounded-lg p-2 pl-3 shadow-lg backdrop-blur-md">
                    <input type="file" ref={fileInputRef} onChange={handleImageUpload} accept="image/*" className="hidden" />
                    <button onClick={() => fileInputRef.current.click()} disabled={referenceImages.length >= 3 || isLoading} className="flex-shrink-0 w-10 h-10 bg-gray-800 rounded-md flex items-center justify-center hover:bg-gray-700 transition-colors relative disabled:opacity-50 disabled:cursor-not-allowed" title="Upload Reference Image">
                        <Plus className="w-6 h-6 text-gray-400" />
                    </button>
                    
                    <div className="flex items-center gap-2">
                        {referenceImages.map(img => (
                            <div key={img.id} className="relative w-10 h-10 flex-shrink-0">
                                <img src={img.url} alt="Reference" className="w-full h-full object-cover rounded-md" />
                                <button onClick={() => removeReferenceImage(img.id)} className="absolute -top-1 -right-1 bg-red-500 rounded-full p-0.5 hover:bg-red-400"><X size={12} /></button>
                            </div>
                        ))}
                    </div>

                    <input type="text" value={prompt} onChange={(e) => setPrompt(e.target.value)} onKeyDown={(e) => e.key === 'Enter' && handleGenerateImage()} placeholder="Ek nayi duniya ki kalpana karein..." className="w-full bg-transparent focus:outline-none text-white placeholder-gray-500 text-base md:text-lg pl-2" disabled={isLoading} />
                    <button onClick={handleGenerateImage} disabled={isLoading || !prompt.trim()} className="flex-shrink-0 w-10 h-10 bg-white rounded-md flex items-center justify-center hover:bg-gray-300 transition-colors disabled:bg-gray-600 disabled:cursor-not-allowed" title="Generate">
                        {isLoading ? <Loader className="w-5 h-5 animate-spin text-black" /> : <Send className="w-5 h-5 text-black" />}
                    </button>
                </div>
            </footer>
        </div>
    );
}
